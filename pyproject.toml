[build-system]
requires = [
    "phosphorus>=0.8",
]
build-backend = "phosphorus.construction.api"

[project]
name = "django_ca"
version = "1.0.0"

authors = [
    { name = "OnePesu tech team", email = "tech@kuma.ai" },
]
license = { text = "BSD-3-Clause" }

readme = "docs/README.md"
description = "Local CA"

requires-python = ">=3.13"
dependencies = [
    "authlib~=1.4.0",
    "dj_settings~=6.0.0",
    "django~=5.1.4",
    "django_cors_headers~=4.6.0",
    "django_stubs_ext~=5.1.1",
    "gunicorn~=23.0.0",
    "pathurl~=0.8.0",
    "psycopg~=3.2.3",
    "pyjwt~=2.10.1",
    "pyopenssl~=24.3.0",
    "pyutilkit~=0.10.0",
    "uvicorn~=0.34.0",
]

[tool.phosphorus.dev-dependencies]
dev = [
    "django-extensions~=3.2",
    "ipdb~=0.13",
    "ipython~=8.31",
    "watchfiles~=1.0",
    "werkzeug~=3.1",
]
lint = [
    "black~=24.10",
    "django-stubs~=5.1",
    "mypy~=1.14",
    "ruff~=0.8",
    "types-python-dateutil~=2.9",
]
test = [
    "factorio~=0.6",
    "freezegun~=1.5",
    "pytest~=8.3",
    "pytest-asyncio~=0.25",
    "pytest-cov~=6.0",
    "pytest-django~=4.9",
]

[tool.black]
target-version = [
    "py313",
]

[tool.mypy]
exclude = "/migrations/"

check_untyped_defs = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_expr = false          # many builtins are Any
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
extra_checks = true
ignore_missing_imports = true
no_implicit_reexport = true
show_column_numbers = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = true

plugins = [
    "mypy_django_plugin.main",
]

[tool.django-stubs]
django_settings_module = "django_ca.settings"

[tool.ruff]
src = [
    "src",
]
target-version = "py313"

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "C901",   # Adding a limit to complexity is too arbitrary
    "COM812", # Avoid magic trailing commas
    "D10",    # Not everything needs a docstring
    "D203",   # Prefer `no-blank-line-before-class` (D211)
    "D213",   # Prefer `multi-line-summary-first-line` (D212)
    "E501",   # Avoid clashes with black
    "PLR09",  # Adding a limit to complexity is too arbitrary
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "FBT001",  # Test arguments are handled by pytest
    "PLR2004", # Tests should contain magic number comparisons
    "S101",    # Pytest needs assert statements
]
"**/migrations/**" = [
    "RUF012",  # Migrations are not typed
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"mock".msg = "Use unittest.mock"
"pytz".msg = "Use zoneinfo"

[tool.ruff.lint.isort]
combine-as-imports = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "django",
    "first-party",
    "tests",
]
split-on-trailing-comma = false

[tool.ruff.lint.isort.sections]
"django" = [
    "django",
]
"tests" = [
    "tests",
]

[tool.pytest.ini_options]
addopts = "-ra -v --reuse-db"
testpaths = "tests"

[tool.coverage.run]
branch = true
source = [
    "src/",
]
data_file = ".cov_cache/coverage.dat"
omit = [
    "src/django_ca/*/migrations/*",
    "src/django_ca/*/types.py",
]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]
fail_under = 45
precision = 2
show_missing = true
skip_covered = true
skip_empty = true
